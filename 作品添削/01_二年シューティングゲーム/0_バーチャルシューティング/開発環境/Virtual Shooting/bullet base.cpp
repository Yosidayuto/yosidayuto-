//=============================================================================
//
// バレットベース処理 [bullet base.cpp]
// Author : 吉田悠人
//
//=============================================================================

//=============================================================================
//ヘッダーファイル
//=============================================================================
#include "bullet base.h"
#include "manager.h"	
#include "renderer.h"	
#include "explosion.h"	
#include "sound.h"		
#include "effect.h"		
#include "bullet.h"
#include "enemy bullet.h"
#include "laser.h"
#include "homing.h"
//=============================================================================
//静的メンバー変数
//=============================================================================

//=============================================================================
//コンストラクタ
//=============================================================================
CBulletBase::CBulletBase(int nPriorit) :CScene2d(nPriorit)
{
	m_nLife = 0;
	memset(&m_move, NULL, sizeof(m_move));
	//タイプ処理
	CScene::SetObjType(CScene::OBJ_TYPE_BULLET);
}

//=============================================================================
//デストラクタ
//=============================================================================
CBulletBase::~CBulletBase()
{
}

//=============================================================================
// テクスチャロード
//=============================================================================
HRESULT CBulletBase::Load(void)
{
	CBullet::Load();
	CEnemyBullet::Load();
	CLaser::Load();
	CHoming::Load();
	return S_OK;
}

//=============================================================================
// テクスチャアンロード
//=============================================================================
void CBulletBase::Unload(void)
{
	CBullet::Unload();
	CEnemyBullet::Unload();
	CLaser::Unload();
	CHoming::Unload();

}

//=============================================================================
//初期化処理
//=============================================================================
HRESULT CBulletBase::Init(void)
{
	//初期化処理
	CScene2d::Init();
	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CBulletBase::Uninit(void)
{
	//終了処理
	CScene2d::Uninit();
	//オブジェクトの破棄
	Release();
}

//=============================================================================
// 更新処理
//=============================================================================
void CBulletBase::Update(void)
{
	//ポリゴンの位置取得
	D3DXVECTOR3 pos = GetPos();
	
	//移動処理
	Move();

	//射程距離
	if (Range())
	{
		return;
	}

	//更新処理
	CScene2d::Update();

	//当たり判定があるオブジェクトサーチ
	ObjeSearch();


}

//=============================================================================
//描画処理
//=============================================================================
void CBulletBase::Draw(void)
{
	//描画処理
	CScene2d::Draw();
}


//=============================================================================
// オブジェクトサーチ
//=============================================================================
void CBulletBase::ObjeSearch(void)
{
	//オブジェクト取得用
	CScene* pTop[PRIORITY_MAX] = {};
	//次チェックするオブジェクトのポインタ
	CScene* pNext = NULL;

	//topのアドレスを取得
	for (int nCount = 0; nCount < PRIORITY_MAX; nCount++)
	{
		pTop[nCount] = *(CScene::GetTop() + nCount);
	}

	//バレット効果処理
	for (int nCount = 0; nCount < PRIORITY_MAX; nCount++)
	{
		if (pTop[nCount] != NULL)
		{
			pNext = pTop[nCount];
			//その描画優先度のオブジェクトがなくなるまでループ
			while (pNext != NULL)
			{

				//バレット処理
				Bullet(pNext);
				//次のオブジェクトのポインタを更新
				pNext = pNext->GetNext();
			}
		}
	}
}

//=============================================================================
// 射程距離
//=============================================================================
bool CBulletBase::Range(void)
{
	//ポリゴンの位置取得
	D3DXVECTOR3 pos = GetPos();
	
	//ライフ減少
	m_nLife--;

	//ライフが０以下の時
	if (m_nLife <= 0)
	{
		CBulletBase::Uninit();	//終了処理
		return true;
	}

	//画面外に出た時
	if (pos.y < 0					//画面上
		|| pos.y>SCREEN_HEIGHT		//画面下
		|| pos.x<(STAGE_POS - STAGE_SIZE / 2)	//画面左 
		|| pos.x>(STAGE_POS + STAGE_SIZE / 2))	//画面右
	{
		CBulletBase::Uninit();	//終了処理
		return true;
	}

	//まだ残っているとき
	return false;
}

//=============================================================================
// 移動量セッター
//=============================================================================
void CBulletBase::SetMove(D3DXVECTOR3 move)
{
	m_move = move;
}

//=============================================================================
// 移動量ゲッター
//=============================================================================
D3DXVECTOR3 CBulletBase::GetMove(void)
{
	return m_move;
}

//=============================================================================
// ライフセッター
//=============================================================================
void CBulletBase::SetLife(int nLife)
{
	m_nLife = nLife;
}

//=============================================================================
// ライフゲッター
//=============================================================================
int CBulletBase::GetLife(void)
{
	return m_nLife;
}

