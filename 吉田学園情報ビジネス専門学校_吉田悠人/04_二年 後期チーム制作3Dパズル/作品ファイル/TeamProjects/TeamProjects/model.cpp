//=============================================================================
//
//	モデルデータ処理[model.cpp]
//	Author:吉田悠人
//
//=============================================================================

//=============================================================================
//インクルードファイル
//=============================================================================
#include "model.h"
#include "main.h"
#include "manager.h"
#include "renderer.h"

//=============================================================================
//コンストラクタ
//=============================================================================
CModel::CModel()
{
    //モデルデータの初期化
    ZeroMemory(&m_ModelData, sizeof(m_ModelData));
    m_pParentObject = NULL;
    SetObjType(OBJTYPE_NONE);
}

//=============================================================================
//デストラクタ
//=============================================================================
CModel::~CModel()
{

}

//=============================================================================
//初期化処理
//=============================================================================
HRESULT CModel::Init(void)
{
    CObject3D::Init();
    return S_OK;
}

//=============================================================================
//終了処理
//=============================================================================
void CModel::Uninit(void)
{
    CObject3D::Uninit();
	Release();
}

//=============================================================================
//更新処理
//=============================================================================
void CModel::Update(void)
{
    CObject3D::Update();
}

//=============================================================================
//描画処理
//=============================================================================
void CModel::Draw(void)
{
    LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();
    D3DMATERIAL9 matDef;
    D3DXMATERIAL* pMat;

    //マテリアル情報の取得
    pDevice->GetMaterial(&matDef);

    if(m_ModelData.pBuffMat != NULL)
    {
        pMat = (D3DXMATERIAL*)m_ModelData.pBuffMat->GetBufferPointer();
    }

    //マテリアル情報の設定とマテリアルごとに描画
    for(int nCntMat = 0; nCntMat < (int)m_ModelData.nNumMat; nCntMat++)
    {
		//マテリアルのアンビエントにディフューズカラーを設定
		//pMat[nCntMat].MatD3D.Ambient = pMat[nCntMat].MatD3D.Diffuse;
		//マテリアルの設定
        pDevice->SetMaterial(&pMat[nCntMat].MatD3D);
		// テクスチャ
        pDevice->SetTexture(0, m_ModelData.pTexture[nCntMat]);
		//モデルパーツの描画
        m_ModelData.pMesh->DrawSubset(nCntMat);
    }

    //マテリアル情報のリセット
    pDevice->SetMaterial(&matDef);
}

//=============================================================================
// モデルデータゲッター
//=============================================================================
CModel::MODELDATA CModel::GetModelData(void)
{
    return m_ModelData;
}
//=============================================================================
// モデルデータセッター
//=============================================================================
void CModel::SetModelData(MODELDATA Model)
{
	m_ModelData = Model;
}
