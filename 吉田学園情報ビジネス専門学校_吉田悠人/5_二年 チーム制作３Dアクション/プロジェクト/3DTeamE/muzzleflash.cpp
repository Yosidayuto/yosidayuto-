//=============================================================================
//
// マズルフラッシュ処理 [muuzzleflash.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "muzzleflash.h"
#include "manager.h"
#include "renderer.h"

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CMuzzleflash::m_pTexture = NULL;

//=============================================================================
// コンストラクタ
//=============================================================================
CMuzzleflash::CMuzzleflash()
{
	m_pos = D3DXVECTOR3(0.0f,0.0f,0.0f);
	m_move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_size = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_col = D3DCOLOR_RGBA(255, 255, 255, 255);
}

//=============================================================================
// デストラクタ
//=============================================================================
CMuzzleflash::~CMuzzleflash()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CMuzzleflash::Load(void)
{
	CRenderer *pRenderer = CManager::GetRenderer();
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();

	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,				// デバイスへのポインタ
		MUZZLEFLASH_TEXTURE,								// ファイルの名前
		&m_pTexture);								// 読み込むメモリー
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CMuzzleflash::Unload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

//=============================================================================
// 生成関数
//=============================================================================
CMuzzleflash * CMuzzleflash::Create(D3DXVECTOR3 pos, D3DXVECTOR3 move, D3DXVECTOR3 rot, D3DXVECTOR3 size, D3DXCOLOR col)
{
	CMuzzleflash* pMuzzleflash = NULL;
	pMuzzleflash = new CMuzzleflash;
	pMuzzleflash->m_pos = pos;
	pMuzzleflash->m_move = move;
	pMuzzleflash->m_rot = rot;
	pMuzzleflash->m_size = size;
	pMuzzleflash->m_col = col;
	pMuzzleflash->Init();

	return pMuzzleflash;
}

//=============================================================================
// 初期化関数
//=============================================================================
HRESULT CMuzzleflash::Init(void)
{
	CBillboard::Init();
	SetPosition(m_pos);
	SetSize(m_size);
	SetColor(D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f));
	BindTexture(m_pTexture);
	return S_OK;
}

//=============================================================================
// 終了関数
//=============================================================================
void CMuzzleflash::Uninit(void)
{
	CBillboard::Uninit();
}

//=============================================================================
// 更新関数
//=============================================================================
void CMuzzleflash::Update(void)
{
	CBillboard::Update();
	//テクスチャセット
}

//=============================================================================
// 描画関数
//=============================================================================
void CMuzzleflash::Draw(void)
{
	CBillboard::Draw();
}
